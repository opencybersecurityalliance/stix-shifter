
import json
from logging import Logger
import os

class Test_Language_EN_Confirmation():
    def test_lang_en_host(self):
        list_of_lang_en_files = self._get_list_of_files("lang_en.json")
        for file in list_of_lang_en_files:
            self._confirm_standard_hostname_text(json.loads(file))
            
    def test_lang_en_port(self):
        list_of_lang_en_files = self._get_list_of_files("lang_en.json")
        for file in list_of_lang_en_files:
            self._confirm_standard_port_text(json.loads(file))
                 
    def test_lang_en_certificate(self):
        list_of_lang_en_files = self._get_list_of_files("lang_en.json")
        for file in list_of_lang_en_files:
            self._confirm_standard_certificate_text(json.loads(file))
            
    def _confirm_standard_hostname_text(self, lang_en_json):
        standard_label = "Management IP address or hostname"
        standard_description = "Specify the IP address or hostname of the data source"
            
        if("connection" in lang_en_json and "host" in lang_en_json["connection"]):
            assert lang_en_json["connection"]["host"]["label"] == standard_label
            assert lang_en_json["connection"]["host"]["description"] == standard_description
            
    def _confirm_standard_port_text(self, lang_en_json):
        standard_label = "Host port"
        standard_description = "Set the port number that is associated with the hostname or IP address"
            
        if("connection" in lang_en_json and "port" in lang_en_json["connection"]):
            assert lang_en_json["connection"]["port"]["label"] == standard_label
            assert lang_en_json["connection"]["port"]["description"] == standard_description
            
    def _confirm_standard_certificate_text(self, lang_en_json):
        standard_label = "PEM Formatted SSL certificate(s)"
        standard_description = "Provide a self-signed or CA-signed certificate to securely communicate with the data source."
            
        if("connection" in lang_en_json and "selfSignedCert" in lang_en_json["connection"]):
            assert lang_en_json["connection"]["selfSignedCert"]["label"] == standard_label
            assert lang_en_json["connection"]["selfSignedCert"]["description"] == standard_description
                
    def _get_list_of_files(self, file_name):
        #Generated by WCA for GP
        #Here's an example of how you can do this in Python using the os module:

        # Define the directory path
        directory_path = os.getcwd() + "/stix_shifter_modules"
        lang_en_file_list = list()
        
        # Iterate through all the child directories
        for dir_name, subdir_list, file_list in os.walk(directory_path):
            # Check if the file exists in the current directory
            if file_name in file_list:
                # Open the file and read its contents
                with open(os.path.join(dir_name, file_name), 'r') as file:
                    lang_en_file_list.append(file.read())
        return lang_en_file_list
            
            
             
